---
- hosts: all
  become: true
  vars_files:
    - env_variables

  tasks:
    - name: Installing Prerequisites for Kubernetes
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - vim
          - software-properties-common
        state: present

    - name: Add Dockerâ€™s official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
        state: present
        filename: docker
        mode: 0600

    - name: Create containerd config file
      file:
        path: "/etc/modules-load.d/containerd.conf"
        state: "touch"

    - name: Add conf for containerd
      blockinfile:
        path: "/etc/modules-load.d/containerd.conf"
        block: |
              overlay
              br_netfilter

    - name: modprobe
      shell: |
              sudo modprobe overlay
              sudo modprobe br_netfilter

    - name: Set system configurations for Kubernetes networking
      file:
        path: "/etc/sysctl.d/99-kubernetes-cri.conf"
        state: "touch"

    - name: Add conf for containerd
      blockinfile:
        path: "/etc/sysctl.d/99-kubernetes-cri.conf"
        block: |
          net.ipv4.ip_forward = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
    
    - name: Apply new settings
      command: sudo sysctl --system
    
    - name: Installing required packages
      apt:
        name: firewalld
        state: present

    - name: Starting and Enabling the required services
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      with_items: "{{ services }}"

    - name: Allow Network Ports in Firewalld
      ansible.posix.firewalld:
        port: "{{ item }}"
        state: enabled
        permanent: yes
        immediate: yes
      with_items: "{{ master_ports if ('masters' in group_names) else worker_ports }}"

    #  - name: install containerd
    #    shell: |
    #            sudo apt-get update && sudo apt-get install -y containerd
    #            sudo mkdir -p /etc/containerd
    #            sudo containerd config default | sudo tee /etc/containerd/config.toml
    #            sudo systemctl restart containerd

    - name: Install containerd
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
        # - docker-ce 
        # - docker-ce-cli 
          - containerd.io
      # notify:
      #   - docker status

    - name: Remove config.toml
      become: true
      shell: |
              rm /etc/containerd/config.toml
              systemctl restart containerd   

    # - name: Enable service docker, and enable persistently
    #   service:
    #     name: docker
    #     enabled: yes

    # - name: Add kube user to docker group
    #   user:
    #     name: "{{kube_user}}"
    #     group: docker

    - name: Add Google official GPG key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add Kubernetes Repository
      apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes
        mode: 0600

    - name: Installing Kubernetes Cluster Packages.
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Enable service kubelet, and enable persistently
      service:
        name: kubelet
        enabled: yes

    # - name: Configure node ip
    #   lineinfile:
    #     path: /etc/default/kubelet
    #     line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}

    # - name: Restart kubelet
    #   service:
    #     name: kubelet
    #     daemon_reload: yes
    #     state: restarted
    # 
    # - name: Reboot all the kubernetes nodes.
    #   reboot:
    #     post_reboot_delay: 10
    #     reboot_timeout: 40
    #     connect_timeout: 60
    #     test_command: uptime
- hosts: masters
  become: true
  vars_files:
    - env_variables

  tasks:
    - name: Installing Kubectl command line on master.
      apt:
        name:
          - kubectl
        state: present
        force: yes
        
    - name: Configure kubectl command auto-completion.
      become: true
      become_user: kube
      lineinfile:
        dest: $HOME/.bashrc
        line: 'source <(kubectl completion bash)'
        insertafter: EOF